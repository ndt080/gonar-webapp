# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

union Morph = Article | ArticleAggregator | ArticleConnection | ArticleConnectionContent | ArticleConnectionCreated_at | ArticleConnectionDescription | ArticleConnectionId | ArticleConnectionImage | ArticleConnectionPublished_at | ArticleConnectionPublished_data | ArticleConnectionTitle | ArticleConnectionUpdated_at | ArticleGroupBy | I18NLocale | Pages | PagesAggregator | PagesConnection | PagesConnectionContent | PagesConnectionCreated_at | PagesConnectionGUID | PagesConnectionHeaderText | PagesConnectionId | PagesConnectionLocale | PagesConnectionPreviewImage | PagesConnectionTitle | PagesConnectionUpdated_at | PagesGroupBy | UploadFile | UploadFileAggregator | UploadFileAggregatorAvg | UploadFileAggregatorMax | UploadFileAggregatorMin | UploadFileAggregatorSum | UploadFileConnection | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionCreated_at | UploadFileConnectionExt | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionHeight | UploadFileConnectionId | UploadFileConnectionMime | UploadFileConnectionName | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | UploadFileConnectionSize | UploadFileConnectionUpdated_at | UploadFileConnectionUrl | UploadFileConnectionWidth | UploadFileGroupBy | UserPermissionsPasswordPayload | UsersPermissionsLoginPayload | UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleAggregator | UsersPermissionsRoleConnection | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionType | UsersPermissionsRoleGroupBy | UsersPermissionsUser | UsersPermissionsUserAggregator | UsersPermissionsUserConnection | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserGroupBy | createArticlePayload | createPagePayload | createRolePayload | createUserPayload | deleteArticlePayload | deleteFilePayload | deletePagePayload | deleteRolePayload | deleteUserPayload | updateArticlePayload | updatePagePayload | updateRolePayload | updateUserPayload

type AdminUser {
    firstname: String!
    id: ID!
    lastname: String!
    username: String
}

type Article {
    Content: String!
    Description: String!
    Image: UploadFile
    Published_data: DateTime!
    Title: String!
    created_at: DateTime!
    id: ID!
    published_at: DateTime
    updated_at: DateTime!
}

type ArticleAggregator {
    count: Int
    totalCount: Int
}

type ArticleConnection {
    aggregate: ArticleAggregator
    groupBy: ArticleGroupBy
    values: [Article]
}

type ArticleConnectionContent {
    connection: ArticleConnection
    key: String
}

type ArticleConnectionCreated_at {
    connection: ArticleConnection
    key: DateTime
}

type ArticleConnectionDescription {
    connection: ArticleConnection
    key: String
}

type ArticleConnectionId {
    connection: ArticleConnection
    key: ID
}

type ArticleConnectionImage {
    connection: ArticleConnection
    key: ID
}

type ArticleConnectionPublished_at {
    connection: ArticleConnection
    key: DateTime
}

type ArticleConnectionPublished_data {
    connection: ArticleConnection
    key: DateTime
}

type ArticleConnectionTitle {
    connection: ArticleConnection
    key: String
}

type ArticleConnectionUpdated_at {
    connection: ArticleConnection
    key: DateTime
}

type ArticleGroupBy {
    Content: [ArticleConnectionContent]
    Description: [ArticleConnectionDescription]
    Image: [ArticleConnectionImage]
    Published_data: [ArticleConnectionPublished_data]
    Title: [ArticleConnectionTitle]
    created_at: [ArticleConnectionCreated_at]
    id: [ArticleConnectionId]
    published_at: [ArticleConnectionPublished_at]
    updated_at: [ArticleConnectionUpdated_at]
}

type I18NLocale {
    code: String
    created_at: DateTime!
    id: ID!
    name: String
    updated_at: DateTime!
}

type Mutation {
    createArticle(input: createArticleInput): createArticlePayload
    createPage(input: createPageInput): createPagePayload
    createPageLocalization(input: updatePageInput!): Pages!
    "Create a new role"
    createRole(input: createRoleInput): createRolePayload
    "Create a new user"
    createUser(input: createUserInput): createUserPayload
    deleteArticle(input: deleteArticleInput): deleteArticlePayload
    "Delete one file"
    deleteFile(input: deleteFileInput): deleteFilePayload
    deletePage(input: deletePageInput): deletePagePayload
    "Delete an existing role"
    deleteRole(input: deleteRoleInput): deleteRolePayload
    "Delete an existing user"
    deleteUser(input: deleteUserInput): deleteUserPayload
    emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
    forgotPassword(email: String!): UserPermissionsPasswordPayload
    login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
    multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID, source: String): [UploadFile]!
    register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
    resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
    updateArticle(input: updateArticleInput): updateArticlePayload
    updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
    updatePage(input: updatePageInput): updatePagePayload
    "Update an existing role"
    updateRole(input: updateRoleInput): updateRolePayload
    "Update an existing user"
    updateUser(input: updateUserInput): updateUserPayload
    upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID, source: String): UploadFile!
}

type Pages {
    Content: String
    GUID: String
    HeaderText: String!
    PreviewImage: UploadFile
    Title: String!
    created_at: DateTime!
    id: ID!
    locale: String
    localizations(limit: Int, sort: String, start: Int, where: JSON): [Pages]
    updated_at: DateTime!
}

type PagesAggregator {
    count: Int
    totalCount: Int
}

type PagesConnection {
    aggregate: PagesAggregator
    groupBy: PagesGroupBy
    values: [Pages]
}

type PagesConnectionContent {
    connection: PagesConnection
    key: String
}

type PagesConnectionCreated_at {
    connection: PagesConnection
    key: DateTime
}

type PagesConnectionGUID {
    connection: PagesConnection
    key: String
}

type PagesConnectionHeaderText {
    connection: PagesConnection
    key: String
}

type PagesConnectionId {
    connection: PagesConnection
    key: ID
}

type PagesConnectionLocale {
    connection: PagesConnection
    key: String
}

type PagesConnectionPreviewImage {
    connection: PagesConnection
    key: ID
}

type PagesConnectionTitle {
    connection: PagesConnection
    key: String
}

type PagesConnectionUpdated_at {
    connection: PagesConnection
    key: DateTime
}

type PagesGroupBy {
    Content: [PagesConnectionContent]
    GUID: [PagesConnectionGUID]
    HeaderText: [PagesConnectionHeaderText]
    PreviewImage: [PagesConnectionPreviewImage]
    Title: [PagesConnectionTitle]
    created_at: [PagesConnectionCreated_at]
    id: [PagesConnectionId]
    locale: [PagesConnectionLocale]
    updated_at: [PagesConnectionUpdated_at]
}

type Query {
    article(id: ID!, publicationState: PublicationState): Article
    articles(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Article]
    articlesConnection(limit: Int, sort: String, start: Int, where: JSON): ArticleConnection
    files(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UploadFile]
    filesConnection(limit: Int, sort: String, start: Int, where: JSON): UploadFileConnection
    me: UsersPermissionsMe
    page(id: ID!, publicationState: PublicationState): Pages
    pages(limit: Int, locale: String, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Pages]
    pagesConnection(limit: Int, locale: String, sort: String, start: Int, where: JSON): PagesConnection
    role(id: ID!, publicationState: PublicationState): UsersPermissionsRole
    "Retrieve all the existing roles. You can't apply filters on this query."
    roles(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UsersPermissionsRole]
    rolesConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsRoleConnection
    user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
    users(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
    usersConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsUserConnection
}

type UploadFile {
    alternativeText: String
    caption: String
    created_at: DateTime!
    ext: String
    formats: JSON
    hash: String!
    height: Int
    id: ID!
    mime: String!
    name: String!
    previewUrl: String
    provider: String!
    provider_metadata: JSON
    related(limit: Int, sort: String, start: Int, where: JSON): [Morph]
    size: Float!
    updated_at: DateTime!
    url: String!
    width: Int
}

type UploadFileAggregator {
    avg: UploadFileAggregatorAvg
    count: Int
    max: UploadFileAggregatorMax
    min: UploadFileAggregatorMin
    sum: UploadFileAggregatorSum
    totalCount: Int
}

type UploadFileAggregatorAvg {
    height: Float
    size: Float
    width: Float
}

type UploadFileAggregatorMax {
    height: Float
    size: Float
    width: Float
}

type UploadFileAggregatorMin {
    height: Float
    size: Float
    width: Float
}

type UploadFileAggregatorSum {
    height: Float
    size: Float
    width: Float
}

type UploadFileConnection {
    aggregate: UploadFileAggregator
    groupBy: UploadFileGroupBy
    values: [UploadFile]
}

type UploadFileConnectionAlternativeText {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionCaption {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionCreated_at {
    connection: UploadFileConnection
    key: DateTime
}

type UploadFileConnectionExt {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionFormats {
    connection: UploadFileConnection
    key: JSON
}

type UploadFileConnectionHash {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionHeight {
    connection: UploadFileConnection
    key: Int
}

type UploadFileConnectionId {
    connection: UploadFileConnection
    key: ID
}

type UploadFileConnectionMime {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionName {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionPreviewUrl {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionProvider {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionProvider_metadata {
    connection: UploadFileConnection
    key: JSON
}

type UploadFileConnectionSize {
    connection: UploadFileConnection
    key: Float
}

type UploadFileConnectionUpdated_at {
    connection: UploadFileConnection
    key: DateTime
}

type UploadFileConnectionUrl {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionWidth {
    connection: UploadFileConnection
    key: Int
}

type UploadFileGroupBy {
    alternativeText: [UploadFileConnectionAlternativeText]
    caption: [UploadFileConnectionCaption]
    created_at: [UploadFileConnectionCreated_at]
    ext: [UploadFileConnectionExt]
    formats: [UploadFileConnectionFormats]
    hash: [UploadFileConnectionHash]
    height: [UploadFileConnectionHeight]
    id: [UploadFileConnectionId]
    mime: [UploadFileConnectionMime]
    name: [UploadFileConnectionName]
    previewUrl: [UploadFileConnectionPreviewUrl]
    provider: [UploadFileConnectionProvider]
    provider_metadata: [UploadFileConnectionProvider_metadata]
    size: [UploadFileConnectionSize]
    updated_at: [UploadFileConnectionUpdated_at]
    url: [UploadFileConnectionUrl]
    width: [UploadFileConnectionWidth]
}

type UserPermissionsPasswordPayload {
    ok: Boolean!
}

type UsersPermissionsLoginPayload {
    jwt: String
    user: UsersPermissionsMe!
}

type UsersPermissionsMe {
    blocked: Boolean
    confirmed: Boolean
    email: String!
    id: ID!
    role: UsersPermissionsMeRole
    username: String!
}

type UsersPermissionsMeRole {
    description: String
    id: ID!
    name: String!
    type: String
}

type UsersPermissionsPermission {
    action: String!
    controller: String!
    enabled: Boolean!
    id: ID!
    policy: String
    role: UsersPermissionsRole
    type: String!
}

type UsersPermissionsRole {
    description: String
    id: ID!
    name: String!
    permissions(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsPermission]
    type: String
    users(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
    count: Int
    totalCount: Int
}

type UsersPermissionsRoleConnection {
    aggregate: UsersPermissionsRoleAggregator
    groupBy: UsersPermissionsRoleGroupBy
    values: [UsersPermissionsRole]
}

type UsersPermissionsRoleConnectionDescription {
    connection: UsersPermissionsRoleConnection
    key: String
}

type UsersPermissionsRoleConnectionId {
    connection: UsersPermissionsRoleConnection
    key: ID
}

type UsersPermissionsRoleConnectionName {
    connection: UsersPermissionsRoleConnection
    key: String
}

type UsersPermissionsRoleConnectionType {
    connection: UsersPermissionsRoleConnection
    key: String
}

type UsersPermissionsRoleGroupBy {
    description: [UsersPermissionsRoleConnectionDescription]
    id: [UsersPermissionsRoleConnectionId]
    name: [UsersPermissionsRoleConnectionName]
    type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
    blocked: Boolean
    confirmed: Boolean
    created_at: DateTime!
    email: String!
    id: ID!
    provider: String
    role: UsersPermissionsRole
    updated_at: DateTime!
    username: String!
}

type UsersPermissionsUserAggregator {
    count: Int
    totalCount: Int
}

type UsersPermissionsUserConnection {
    aggregate: UsersPermissionsUserAggregator
    groupBy: UsersPermissionsUserGroupBy
    values: [UsersPermissionsUser]
}

type UsersPermissionsUserConnectionBlocked {
    connection: UsersPermissionsUserConnection
    key: Boolean
}

type UsersPermissionsUserConnectionConfirmed {
    connection: UsersPermissionsUserConnection
    key: Boolean
}

type UsersPermissionsUserConnectionCreated_at {
    connection: UsersPermissionsUserConnection
    key: DateTime
}

type UsersPermissionsUserConnectionEmail {
    connection: UsersPermissionsUserConnection
    key: String
}

type UsersPermissionsUserConnectionId {
    connection: UsersPermissionsUserConnection
    key: ID
}

type UsersPermissionsUserConnectionProvider {
    connection: UsersPermissionsUserConnection
    key: String
}

type UsersPermissionsUserConnectionRole {
    connection: UsersPermissionsUserConnection
    key: ID
}

type UsersPermissionsUserConnectionUpdated_at {
    connection: UsersPermissionsUserConnection
    key: DateTime
}

type UsersPermissionsUserConnectionUsername {
    connection: UsersPermissionsUserConnection
    key: String
}

type UsersPermissionsUserGroupBy {
    blocked: [UsersPermissionsUserConnectionBlocked]
    confirmed: [UsersPermissionsUserConnectionConfirmed]
    created_at: [UsersPermissionsUserConnectionCreated_at]
    email: [UsersPermissionsUserConnectionEmail]
    id: [UsersPermissionsUserConnectionId]
    provider: [UsersPermissionsUserConnectionProvider]
    role: [UsersPermissionsUserConnectionRole]
    updated_at: [UsersPermissionsUserConnectionUpdated_at]
    username: [UsersPermissionsUserConnectionUsername]
}

type createArticlePayload {
    article: Article
}

type createPagePayload {
    page: Pages
}

type createRolePayload {
    role: UsersPermissionsRole
}

type createUserPayload {
    user: UsersPermissionsUser
}

type deleteArticlePayload {
    article: Article
}

type deleteFilePayload {
    file: UploadFile
}

type deletePagePayload {
    page: Pages
}

type deleteRolePayload {
    role: UsersPermissionsRole
}

type deleteUserPayload {
    user: UsersPermissionsUser
}

type updateArticlePayload {
    article: Article
}

type updatePagePayload {
    page: Pages
}

type updateRolePayload {
    role: UsersPermissionsRole
}

type updateUserPayload {
    user: UsersPermissionsUser
}

enum PublicationState {
    LIVE
    PREVIEW
}

input ArticleInput {
    Content: String!
    Description: String!
    Image: ID
    Published_data: DateTime!
    Title: String!
    created_by: ID
    published_at: DateTime
    updated_by: ID
}

input FileInfoInput {
    alternativeText: String
    caption: String
    name: String
}

input FileInput {
    alternativeText: String
    caption: String
    created_by: ID
    ext: String
    formats: JSON
    hash: String!
    height: Int
    mime: String!
    name: String!
    previewUrl: String
    provider: String!
    provider_metadata: JSON
    related: [ID]
    size: Float!
    updated_by: ID
    url: String!
    width: Int
}

input InputID {
    id: ID!
}

input LocaleInput {
    code: String
    created_by: ID
    name: String
    updated_by: ID
}

input PageInput {
    Content: String
    GUID: String
    HeaderText: String!
    PreviewImage: ID
    Title: String!
    created_by: ID
    locale: String
    localizations: [ID]
    updated_by: ID
}

input RoleInput {
    created_by: ID
    description: String
    name: String!
    permissions: [ID]
    type: String
    updated_by: ID
    users: [ID]
}

input UserInput {
    blocked: Boolean
    confirmationToken: String
    confirmed: Boolean
    created_by: ID
    email: String!
    password: String
    provider: String
    resetPasswordToken: String
    role: ID
    updated_by: ID
    username: String!
}

input UsersPermissionsLoginInput {
    identifier: String!
    password: String!
    provider: String = "local"
}

input UsersPermissionsRegisterInput {
    email: String!
    password: String!
    username: String!
}

input createArticleInput {
    data: ArticleInput
}

input createPageInput {
    data: PageInput
}

input createRoleInput {
    data: RoleInput
}

input createUserInput {
    data: UserInput
}

input deleteArticleInput {
    where: InputID
}

input deleteFileInput {
    where: InputID
}

input deletePageInput {
    where: InputID
}

input deleteRoleInput {
    where: InputID
}

input deleteUserInput {
    where: InputID
}

input editArticleInput {
    Content: String
    Description: String
    Image: ID
    Published_data: DateTime
    Title: String
    created_by: ID
    published_at: DateTime
    updated_by: ID
}

input editFileInput {
    alternativeText: String
    caption: String
    created_by: ID
    ext: String
    formats: JSON
    hash: String
    height: Int
    mime: String
    name: String
    previewUrl: String
    provider: String
    provider_metadata: JSON
    related: [ID]
    size: Float
    updated_by: ID
    url: String
    width: Int
}

input editLocaleInput {
    code: String
    created_by: ID
    name: String
    updated_by: ID
}

input editPageInput {
    Content: String
    GUID: String
    HeaderText: String
    PreviewImage: ID
    Title: String
    created_by: ID
    locale: String
    localizations: [ID]
    updated_by: ID
}

input editRoleInput {
    created_by: ID
    description: String
    name: String
    permissions: [ID]
    type: String
    updated_by: ID
    users: [ID]
}

input editUserInput {
    blocked: Boolean
    confirmationToken: String
    confirmed: Boolean
    created_by: ID
    email: String
    password: String
    provider: String
    resetPasswordToken: String
    role: ID
    updated_by: ID
    username: String
}

input updateArticleInput {
    data: editArticleInput
    where: InputID
}

input updatePageInput {
    data: editPageInput
    where: InputID
}

input updateRoleInput {
    data: editRoleInput
    where: InputID
}

input updateUserInput {
    data: editUserInput
    where: InputID
}


"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"A time string with format: HH:mm:ss.SSS"
scalar Time

"A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

"The `Long` scalar type represents 52-bit integers"
scalar Long

"The `Upload` scalar type represents a file upload."
scalar Upload
